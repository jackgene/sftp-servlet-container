apply plugin: 'war'
apply plugin: 'eclipse-wtp'
apply plugin: 'scala'

sourceCompatibility = 1.6
version = '0.0-SNAPSHOT'

war {
    archiveName = 'hdfs.war'
}

repositories {
    mavenCentral()
}

configurations {
    eclipseExclusion
}

dependencies {
    ext.SCALA_VERSION = '2.9.2'
    ext.SLF4J_VERSION = '1.6.+'
    
    // Libraries needed to run the scala tools
    scalaTools(
        'org.scala-lang:jline:' + SCALA_VERSION,
        'org.scala-lang:scala-compiler:' + SCALA_VERSION,
        'org.scala-lang:scala-library:' + SCALA_VERSION,
    )
    
    providedCompile(
        'javax.servlet:servlet-api:2.5',
    )
    
    compile(
        // Libraries needed for scala api
        'org.scala-lang:scala-library:' + SCALA_VERSION,
        
        'com.google.guava:guava:12.0',
        'org.codehaus.jackson:jackson-core-asl:1.5.2',
        'org.slf4j:slf4j-api:' + SLF4J_VERSION,
        'org.slf4j:slf4j-log4j12:' + SLF4J_VERSION,
    )
    compile(
        'org.apache.hadoop:hadoop-core:0.20.203.0'
    ) {
        exclude group: 'org.mortbay.jetty'
        exclude group: 'tomcat'
    }
    compile files('libs/webdav-servlet-2.0.1.jar')
    
    testCompile(
        'junit:junit:4.+',
        'org.scalamock:scalamock-scalatest-support_' + SCALA_VERSION + ':2.4',
        'org.scalatest:scalatest_' + SCALA_VERSION + ':1.8',
    )
    
    eclipseExclusion(
        'org.scala-lang:scala-library:' + SCALA_VERSION,
    )
}

import static org.gradle.plugins.ide.eclipse.model.AbstractClasspathEntry.*
import org.gradle.plugins.ide.eclipse.model.Container
eclipse {
    classpath {
        minusConfigurations += configurations.eclipseExclusion
        file {
            whenMerged {
                def entries = it.entries
                
                // Add Scala library
                def containerNode = new Node(null, null,
                    ['path': 'org.scala-ide.sdt.launching.SCALA_CONTAINER'])
                def attrNode = new Node(containerNode, 'attributes')
                def depAttrNode = new Node(attrNode, 'attribute',
                    ['name': COMPONENT_NON_DEPENDENCY_ATTRIBUTE, 'value': ''])
                def container = new Container(containerNode)
                entries.add(container)
                
                entries.sort { left,right ->
                    def KIND_SORT_ORDER =
                        ['src': 1, 'con': 2, 'lib': 3, 'output': 4]
                    if (left.kind != right.kind) {
                        return (KIND_SORT_ORDER[left.kind]).
                            compareTo(KIND_SORT_ORDER[right.kind])
                    } else {
                        def kind = left.kind
                        if (kind == 'src') {
                            def leftParentDir = left.dir.parent
                            def rightParentDir = right.dir.parent
                            if (leftParentDir != rightParentDir) {
                                return (leftParentDir).compareTo(rightParentDir)
                            } else {
                                def leftName = left.name
                                def rightName = right.name
                                // resources come last, else normal sort order
                                return leftName == 'resources' ?
                                    (rightName == 'resources' ? 0 : 1) :
                                    (rightName == 'resources' ? -1 :
                                        (leftName).compareTo(rightName))
                            }
                        } else if (kind == 'lib') {
                            return (left.library.file.name).
                                compareTo(right.library.file.name)
                        } else {
                            return (left.path).compareTo(right.path)
                        }
                    }
                }
            }
        }
    }
    
    wtp {
        component {
            contextPath = '/hdfs'
            minusConfigurations += configurations.eclipseExclusion
            file {
                whenMerged {
                    def entries = it.wbModuleEntries
                    
                    entries.sort{ left,right ->
                        if (left.hasProperty('sourcePath')) {
                            if (hasProperty('sourcePath')) {
                                return (left.sourcePath).
                                    compareTo(right.sourcePath)
                            } else {
                                return 1;
                            }
                        } else {
                            if (right.hasProperty('sourcePath')) {
                                return -1;
                            } else {
                                def leftName = left.handle.split('/')[-1]
                                def rightName = right.handle.split('/')[-1]
                                
                                return leftName.compareTo(rightName)
                            }
                        }
                    }
                }
            }
        }
    }
}

task wrapper(type: Wrapper)
